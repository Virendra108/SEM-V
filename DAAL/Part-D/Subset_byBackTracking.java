import java.util.*;
/*
 Implement program to print all subsets of a given Set or Array
Statement Given a set of positive integers, find all its subsets.
Input: array = {1, 2, 3}
Output: // this space denotes null element.
 1  1 2  1 2 3  1 3  2  2 3  3
Input: 1 2
Output: 1  2  1 2

 */
public class Subset_byBackTracking {

    // Function to print all subsets of a given set
    public static void findSubsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        backtrack(subsets, new ArrayList<>(), nums, 0);
        for (List<Integer> subset : subsets) {
            System.out.println(subset);
        }
    }

    // Helper function to perform backtracking
    private static void backtrack(List<List<Integer>> subsets, List<Integer> tempList, int[] nums, int start) {
        subsets.add(new ArrayList<>(tempList));
        for (int i = start; i < nums.length; i++) {
            tempList.add(nums[i]);
            backtrack(subsets, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }

    public static void main(String[] args) {
        int[] array = {1, 2, 3};
        findSubsets(array);
    }
}

//Time Complexity : O(n * 2^n)
//Space Complexity : O(n * 2^n)

/*
TIme and Space Complexity Explanaton by CHatGPT
Time Complexity
Backtracking Function:

The backtrack function is called recursively.
For each element, there are two choices: either include the element in the current subset or exclude it.
This results in 2^n possible subsets for a set of size n.
Loop Inside Backtrack:

The loop inside the backtrack function runs from start to nums.length, which can be up to n iterations in the worst case.
Each recursive call processes the remaining elements, leading to a branching factor of 2.
Subset Generation:

Each subset is generated by adding elements to tempList and then removing them.
The total number of operations for generating all subsets is proportional to the sum of the lengths of all subsets.
The sum of the lengths of all subsets of a set of size n is O(n * 2^n).
Overall Time Complexity
The overall time complexity is O(n * 2^n).
###############################################################################################################################
Space Complexity
Recursive Call Stack:

The maximum depth of the recursion tree is n, which corresponds to the length of the input array.
This results in a space complexity of O(n) for the call stack.
Storage for Subsets:

The subsets list stores all 2^n subsets.
Each subset can have up to n elements.
The space required to store all subsets is O(n * 2^n).
Temporary List:

The tempList is used to store the current subset being generated.
The maximum size of tempList is n.
Overall Space Complexity
The overall space complexity is O(n * 2^n).
*/
